{"version":3,"sources":["components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Card","name","id","email","src","alt","CardList","robots","cardComponent","map","user","i","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAeeA,EAbG,SAAC,GAAiC,EAAhCC,YAAiC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,qBAAKC,UAAU,MAAf,SACC,uBACCA,UAAU,mCACVC,KAAK,SACLC,YAAY,qBACZC,SAAYJ,OCEPK,EATA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,SAAlE,SACKJ,EAAMK,YCSJC,EAbF,SAACN,GACV,IAAOO,EAAeP,EAAfO,KAAKC,EAAUR,EAAVQ,GAAGC,EAAOT,EAAPS,MACf,OACI,sBAAKd,UAAU,sDAAf,UACI,qBAAKe,IAAG,+BAA0BF,EAA1B,YAAuCG,IAAI,KACnD,gCACI,6BAAKJ,IACL,4BAAIE,WCOLG,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OAAO,cAAC,EAAD,CAAcT,GAAIK,EAAOI,GAAGT,GAAID,KAAMM,EAAOI,GAAGV,KAAME,MAAOI,EAAOI,GAAGR,OAA5DQ,MAExB,OACE,8BACQH,KCyCGI,G,wDA3CX,aAAc,IAAD,8BACT,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAC5B,YAAY2B,EAAME,OAAOC,SAbxC,EAAKC,MAAQ,CACTX,OAAQ,GACRpB,YAAa,IAJR,E,qDAQb,WACC,IAAD,OACIgC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACR,OAAOgB,S,oBAMzC,WAAS,IAAD,OACEC,EAAgBC,KAAKP,MAAMX,OAAOmB,QAAO,SAAAC,GAC3C,OAAOA,EAAM1B,KAAK2B,cAAcC,SAAS,EAAKX,MAAM/B,YAAYyC,kBAEpE,OAAgC,IAA7BH,KAAKP,MAAMX,OAAOuB,OAEV,oBAAIzC,UAAU,KAAd,qBAKH,sBAAKA,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWD,aAAcqC,KAAKZ,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,CAAUN,OAAQiB,a,GAlCrBO,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.badab4c9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchfield , searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n         <input\r\n          className='pa3 ba b--green bg-lightest-blue' \r\n          type='search' \r\n          placeholder='Search Robots.....'\r\n          onChange = {searchChange}>\r\n         </input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Scroll; ","import React from 'react';\r\nconst Card = (props) =>{\r\n    const {name,id,email}=props;\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200*200`}alt='' ></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((user,i)=>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}></Card>\r\n    })\r\n  return(\r\n    <div>\r\n           {cardComponent}\r\n    </div>\r\n\r\n    );\r\n}\r\nexport default CardList;\r\n","import React , {Component} from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport CardList from '../components/CardList';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n\r\n    }\r\n    componentDidMount()\r\n    {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots:users}));\r\n    }\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield:event.target.value})\r\n        }\r\n        \r\n    render(){\r\n        const filteredRobots= this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if(this.state.robots.length === 0)\r\n        {\r\n            return <h1 className='tc'>Loading</h1>\r\n        }\r\n        else\r\n        {\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f1'>ROBOFRIENDS</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}></SearchBox>\r\n                    <Scroll>\r\n                     <CardList robots={filteredRobots}></CardList>\r\n                    </Scroll>\r\n                    \r\n                </div>\r\n            );\r\n        }\r\n        \r\n    } \r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}